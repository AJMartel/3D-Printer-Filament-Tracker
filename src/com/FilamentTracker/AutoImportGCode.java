package com.FilamentTracker;

import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;

import org.apache.commons.io.input.ReversedLinesFileReader;

import com.FilamentTracker.Dialogs.PrintStreamDialog;

/**
 * FILENAME:    AutoImportGCode.java<P>
 * DESCRIPTION: This class will added prints to a stream. It is intended to be run while
 *              the program is in the tray, capturing prints when the user does not add them.
 *
 * @author Andrew Comer
 * @email AndrewJComer@yahoo.com
 */
public class AutoImportGCode extends Thread
{

    private boolean                hasSimplify3D   = false;
    private boolean                hasRepetier     = false;
    private String                 simplify3DDate;
    private String                 repetierDate;
    private File                   simplify3DFile  = null;
    private File                   repetierFile    = null;
    private final DateFormat       printDateFormat = new SimpleDateFormat("EEE, MMM d, yyyy");
    public static ArrayList<Print> printStream     = new ArrayList<Print>();

    /**
     * FUNCTION:    run<P>
     * PURPOSE:     Constantly scans the gcode files generated by various slicing programs for updates
     */
    public void run()
    {
        while (true)
        {
            try
            {
                if (hasSimplify3D) // gcode file size is set to 0, then set to final size
                {
                    if (!(simplify3DDate.equalsIgnoreCase(Export.dateFormat.format(simplify3DFile.lastModified()))))
                    {
                        while (simplify3DFile.length() == 0)
                        {
                            sleep(10);
                        }
                        simplify3DDate = Export.dateFormat.format(simplify3DFile.lastModified());
                        if (addToStream("Simplify3D", simplify3DFile))
                        {
                            PrintStreamDialog.updateList();
                            if (Main.trayIcon != null)
                            {
                                Main.trayIcon.setToolTip("3D Printer Filament Tracker\n" + AutoImportGCode.printStream.size() + " item(s) in print stream");
                            }
                            if (System.getProperty("DEBUG") != null)
                            {
                                System.out.println("Simplify3D gcode file has been updated.");
                            }
                        }
                    }
                }
                if (hasRepetier) // gcode file is removed than created. Size increments
                {
                    if (repetierFile.isFile())
                    {
                        if (!(repetierDate.equalsIgnoreCase(Export.dateFormat.format(repetierFile.lastModified()))))
                        {
                            long repetierFileSize = -1;
                            while (repetierFile.length() > repetierFileSize)
                            {
                                repetierFileSize = repetierFile.length();
                                sleep(200);
                            }
                            repetierDate = Export.dateFormat.format(repetierFile.lastModified());
                            if (addToStream("Repetier Host (Slic3r)", repetierFile))
                            {
                                PrintStreamDialog.updateList();
                                if (Main.trayIcon != null)
                                {
                                    Main.trayIcon.setToolTip("3D Printer Filament Tracker\n" + AutoImportGCode.printStream.size() + " item(s) in print stream");
                                }
                                if (System.getProperty("DEBUG") != null)
                                {
                                    System.out.println("Repetier gcode file has been updated.");
                                }
                            }
                        }
                    }
                }
                if (printStream.isEmpty())
                {
                    PrintStreamDialog.addPrintButton.setEnabled(false);
                    PrintStreamDialog.removePrintButton.setEnabled(false);
                }
                else
                {
                    PrintStreamDialog.addPrintButton.setEnabled(true);
                    PrintStreamDialog.removePrintButton.setEnabled(true);
                }
                checkIfFilesExist();
                Thread.sleep(200);
            }
            catch (InterruptedException | IOException e)
            {
                e.printStackTrace();
            }
        }
    }

    /**
     * FUNCTION:    checkIfFilesExist<P>
     * PURPOSE:     Checks various locations for slicer generated gcode files
     */
    public void checkIfFilesExist()
    {
        if (System.getProperty("os.name").contains("Windows")) //File location on windows
        {
            if (new File(OSSpecificVariables.windowsS3DFileLocation).isFile() && hasSimplify3D == false)
            {
                hasSimplify3D = true;
                simplify3DFile = new File(OSSpecificVariables.windowsS3DFileLocation);
                simplify3DDate = Export.dateFormat.format(simplify3DFile.lastModified());
                if (System.getProperty("DEBUG") != null)
                {
                    System.out.println(System.getProperty("os.name"));
                    System.out.println(String.format("%-18s%s", "Simplify3D File", hasSimplify3D));
                }
            }
            if (new File(OSSpecificVariables.windowsRHFileLocation).isFile() && hasRepetier == false)
            {
                hasRepetier = true;
                repetierFile = new File(OSSpecificVariables.windowsRHFileLocation);
                repetierDate = Export.dateFormat.format(repetierFile.lastModified());
                if (System.getProperty("DEBUG") != null)
                {
                    System.out.println(System.getProperty("os.name"));
                    System.out.println(String.format("%-18s%s", "Repetier File", hasRepetier));
                }
            }
        }
        if (System.getProperty("os.name").contains("Linux")) //File location on Linux
        {
            if (new File(OSSpecificVariables.linuxS3DFileLocation).isFile() && hasSimplify3D == false)
            {
                hasSimplify3D = true;
                simplify3DFile = new File(OSSpecificVariables.linuxS3DFileLocation);
                simplify3DDate = Export.dateFormat.format(simplify3DFile.lastModified());
                if (System.getProperty("DEBUG") != null)
                {
                    System.out.println(System.getProperty("os.name"));
                    System.out.println(String.format("%-18s%s", "Repetier File", hasRepetier));
                }
            }
            if (new File(OSSpecificVariables.linuxRHFileLocation).isFile() && hasRepetier == false)
            {
                hasRepetier = true;
                repetierFile = new File(OSSpecificVariables.linuxRHFileLocation);
                repetierDate = Export.dateFormat.format(repetierFile.lastModified());
                if (System.getProperty("DEBUG") != null)
                {
                    System.out.println(System.getProperty("os.name"));
                    System.out.println(String.format("%-18s%s", "Simplify3D File", hasSimplify3D));
                }
            }
        }
    }

    /**
     * FUNCTION:    getFilamentUsed<P>
     * PURPOSE:     Gets the amount of filament used from a line.
     * 
     * @param line The lien to get the filament used from
     * @return The amount of filament used
     */
    private double getFilamentUsed(String line)
    {
        if (line != null)
        {
            return Double.parseDouble(line.replaceAll("\\(.*\\)", "").replaceAll("[^\\d.-]", ""));
        }
        else
        {
            return 0;
        }
    }

    /**
     * FUNCTION:    readLastFewLines<P>
     * PURPOSE:     Reads the gcode backwards to get the line with the amount of filament used
     * 
     * @param file The file to read from
     * @param program Which slicing program the file came form
     * @return The line with the amount of filament used
     * 
     * @throws IOException
     */
    public String readLastFewLines(File file, String program) throws IOException
    {
        String compareString = "";
        int counter = 1;

        switch (program)
        {
            case "Simplify3D":
                compareString = "Filament length";
                break;
            case "Repetier Host (Slic3r)":
                compareString = "filament used";
                break;
            default:
                break;
        }

        ReversedLinesFileReader object = new ReversedLinesFileReader(file);
        String line = object.readLine();
        while (!line.isEmpty() || !line.contains("\n"))
        {
            if (line.contains(compareString))
            {
                object.close();
                return line;
            }

            if (counter++ < 200)
            {
                line = object.readLine();
            }
            else
            {
                break;
            }
        }

        object.close();
        return null;
    }

    /**
     * FUNCTION:    addToStream<P>
     * PURPOSE:     Adds a print to the print stream
     * 
     * @param slicer The slicer program used
     * @param file The file to read from
     * @return boolean
     * @throws IOException
     */
    public boolean addToStream(String slicer, File file) throws IOException
    {
        double filamentUsed = getFilamentUsed(readLastFewLines(file, slicer));
        if (filamentUsed != 0)
        {
            printStream.add(new Print(printDateFormat.format(simplify3DFile.lastModified()), slicer, filamentUsed));
            return true;
        }
        else
        {
            return false;
        }
    }
}